<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://rutvikjoshi63.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://rutvikjoshi63.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-12-15T17:49:48+00:00</updated><id>https://rutvikjoshi63.github.io/feed.xml</id><title type="html">Rutvik Joshi Career Portfolio</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. Latest blog for information </subtitle><entry><title type="html">Supervised Machine Learning</title><link href="https://rutvikjoshi63.github.io/blog/2023/SupervisedMachineLearning/" rel="alternate" type="text/html" title="Supervised Machine Learning"/><published>2023-12-01T10:56:00+00:00</published><updated>2023-12-01T10:56:00+00:00</updated><id>https://rutvikjoshi63.github.io/blog/2023/SupervisedMachineLearning</id><content type="html" xml:base="https://rutvikjoshi63.github.io/blog/2023/SupervisedMachineLearning/"><![CDATA[<h2 id="topics-covered-in-supervised-machine-learning">Topics covered in Supervised Machine Learning</h2> <p>It is usually a good idea to perform feature scaling to help your model converge faster. This is especially true if your input features have widely different ranges of values. For that, you will use the <a href="https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html"><code class="language-plaintext highlighter-rouge">StandardScaler</code></a> class from scikit-learn. This computes the z-score of your inputs. As a refresher, the z-score is given by the equation:</p> \[z = \frac{x - \mu}{\sigma}\] <p>where $\mu$ is the mean of the feature values and $\sigma$ is the standard deviation.</p> <h1 id="initialize-the-class">Initialize the class</h1> <p>scaler_linear = StandardScaler()</p> <h1 id="compute-the-mean-and-standard-deviation-of-the-training-set-then-transform-it">Compute the mean and standard deviation of the training set then transform it</h1> <p>X_train_scaled = scaler_linear.fit_transform(x_train)</p> <p>print(f”Computed mean of the training set: {scaler_linear.mean_.squeeze():.2f}”) print(f”Computed standard deviation of the training set: {scaler_linear.scale_.squeeze():.2f}”)</p> <h3 id="train-the-model">Train the model</h3> <p>Next, you will create and train a regression model. For this lab, you will use the <a href="https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html">LinearRegression</a> class but take note that there are other <a href="https://scikit-learn.org/stable/modules/classes.html#classical-linear-regressors">linear regressors</a> which you can also use.</p> <h1 id="initialize-the-class-1">Initialize the class</h1> <p>linear_model = LinearRegression()</p> <h1 id="train-the-model-1">Train the model</h1> <p>linear_model.fit(X_train_scaled, y_train )</p> <h3 id="evaluate-the-model">Evaluate the Model</h3> <p>To evaluate the performance of your model, you will measure the error for the training and cross validation sets. For the training error, recall the equation for calculating the mean squared error (MSE):</p> \[J_{train}(\vec{w}, b) = \frac{1}{2m_{train}}\left[\sum_{i=1}^{m_{train}}(f_{\vec{w},b}(\vec{x}_{train}^{(i)}) - y_{train}^{(i)})^2\right]\] <p>Scikit-learn also has a built-in <a href="https://scikit-learn.org/stable/modules/generated/sklearn.metrics.mean_squared_error.html"><code class="language-plaintext highlighter-rouge">mean_squared_error()</code></a> function that you can use. Take note though that <a href="https://scikit-learn.org/stable/modules/model_evaluation.html#mean-squared-error">as per the documentation</a>, scikit-learn’s implementation only divides by <code class="language-plaintext highlighter-rouge">m</code> and not <code class="language-plaintext highlighter-rouge">2*m</code>, where <code class="language-plaintext highlighter-rouge">m</code> is the number of examples.</p> <h1 id="feed-the-scaled-training-set-and-get-the-predictions">Feed the scaled training set and get the predictions</h1> <p>yhat = linear_model.predict(X_train_scaled)</p> <h1 id="use-scikit-learns-utility-function-and-divide-by-2">Use scikit-learn’s utility function and divide by 2</h1> <p>print(f”training MSE (using sklearn function): {mean_squared_error(y_train, yhat) / 2}”)</p> <p>You can then compute the MSE for the cross validation set with basically the same equation.</p> <ul> <li>Say that your training set has an input feature equal to <code class="language-plaintext highlighter-rouge">500</code> which is scaled down to <code class="language-plaintext highlighter-rouge">0.5</code> using the z-score.</li> <li>After training, your model is able to accurately map this scaled input <code class="language-plaintext highlighter-rouge">x=0.5</code> to the target output <code class="language-plaintext highlighter-rouge">y=300</code>.</li> <li>Now let’s say that you deployed this model and one of your users fed it a sample equal to <code class="language-plaintext highlighter-rouge">500</code>.</li> <li>If you get this input sample’s z-score using any other values of the mean and standard deviation, then it might not be scaled to <code class="language-plaintext highlighter-rouge">0.5</code> and your model will most likely make a wrong prediction (i.e. not equal to <code class="language-plaintext highlighter-rouge">y=300</code>).</li> </ul> <p>You will scale the cross validation set below by using the same <code class="language-plaintext highlighter-rouge">StandardScaler</code> you used earlier but only calling its <a href="https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html#sklearn.preprocessing.StandardScaler.transform"><code class="language-plaintext highlighter-rouge">transform()</code></a> method instead of <a href="https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html#sklearn.preprocessing.StandardScaler.fit_transform"><code class="language-plaintext highlighter-rouge">fit_transform()</code></a>.</p> <h1 id="scale-the-cross-validation-set-using-the-mean-and-standard-deviation-of-the-training-set">Scale the cross validation set using the mean and standard deviation of the training set</h1> <p>X_cv_scaled = scaler_linear.transform(x_cv)</p> <p>print(f”Mean used to scale the CV set: {scaler_linear.mean_.squeeze():.2f}”) print(f”Standard deviation used to scale the CV set: {scaler_linear.scale_.squeeze():.2f}”)</p> <h1 id="feed-the-scaled-cross-validation-set">Feed the scaled cross validation set</h1> <p>yhat = linear_model.predict(X_cv_scaled)</p> <h1 id="use-scikit-learns-utility-function-and-divide-by-2-1">Use scikit-learn’s utility function and divide by 2</h1> <p>print(f”Cross validation MSE: {mean_squared_error(y_cv, yhat) / 2}”)</p> <h2 id="adding-polynomial-features">Adding Polynomial Features</h2> <h3 id="create-the-additional-features">Create the additional features</h3> <p>First, you will generate the polynomial features from your training set. The code below demonstrates how to do this using the <a href="https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.PolynomialFeatures.html"><code class="language-plaintext highlighter-rouge">PolynomialFeatures</code></a> class. It will create a new input feature which has the squared values of the input <code class="language-plaintext highlighter-rouge">x</code> (i.e. degree=2).</p> <h1 id="instantiate-the-class-to-make-polynomial-features">Instantiate the class to make polynomial features</h1> <p>poly = PolynomialFeatures(degree=2, include_bias=False)</p> <h1 id="compute-the-number-of-features-and-transform-the-training-set">Compute the number of features and transform the training set</h1> <p>X_train_mapped = poly.fit_transform(x_train)</p> <h1 id="preview-the-first-5-elements-of-the-new-training-set-left-column-is-x-and-right-column-is-x2">Preview the first 5 elements of the new training set. Left column is <code class="language-plaintext highlighter-rouge">x</code> and right column is <code class="language-plaintext highlighter-rouge">x^2</code></h1> <h1 id="note-the-enumber-in-the-output-denotes-how-many-places-the-decimal-point-should">Note: The <code class="language-plaintext highlighter-rouge">e+&lt;number&gt;</code> in the output denotes how many places the decimal point should</h1> <h1 id="be-moved-for-example-324e03-is-equal-to-3240">be moved. For example, <code class="language-plaintext highlighter-rouge">3.24e+03</code> is equal to <code class="language-plaintext highlighter-rouge">3240</code></h1> <p>print(X_train_mapped[:5]) You will then scale the inputs as before to narrow down the range of values.</p> <h1 id="instantiate-the-class">Instantiate the class</h1> <p>scaler_poly = StandardScaler()</p> <h1 id="compute-the-mean-and-standard-deviation-of-the-training-set-then-transform-it-1">Compute the mean and standard deviation of the training set then transform it</h1> <p>X_train_mapped_scaled = scaler_poly.fit_transform(X_train_mapped)</p> <h1 id="preview-the-first-5-elements-of-the-scaled-training-set">Preview the first 5 elements of the scaled training set.</h1> <p>print(X_train_mapped_scaled[:5]) You can then proceed to train the model. After that, you will measure the model’s performance against the cross validation set. Like before, you should make sure to perform the same transformations as you did in the training set. You will add the same number of polynomial features then scale the range of values.</p> <h1 id="initialize-the-class-2">Initialize the class</h1> <p>model = LinearRegression()</p> <h1 id="train-the-model-2">Train the model</h1> <p>model.fit(X_train_mapped_scaled, y_train )</p> <h1 id="compute-the-training-mse">Compute the training MSE</h1> <p>yhat = model.predict(X_train_mapped_scaled) print(f”Training MSE: {mean_squared_error(y_train, yhat) / 2}”)</p> <h1 id="add-the-polynomial-features-to-the-cross-validation-set">Add the polynomial features to the cross validation set</h1> <p>X_cv_mapped = poly.transform(x_cv)</p> <h1 id="scale-the-cross-validation-set-using-the-mean-and-standard-deviation-of-the-training-set-1">Scale the cross validation set using the mean and standard deviation of the training set</h1> <p>X_cv_mapped_scaled = scaler_poly.transform(X_cv_mapped)</p> <h1 id="compute-the-cross-validation-mse">Compute the cross validation MSE</h1> <p>yhat = model.predict(X_cv_mapped_scaled) print(f”Cross validation MSE: {mean_squared_error(y_cv, yhat) / 2}”)</p> <p><strong>You can create a loop that contains all the steps in the previous code cells. Here is one implementation that adds polynomial features up to degree=10.</strong></p> <h1 id="initialize-lists-containing-the-lists-models-and-scalers">Initialize lists containing the lists, models, and scalers</h1> <p>train_mses = [] cv_mses = [] models = [] scalers = []</p> <h1 id="loop-over-10-times-each-adding-one-more-degree-of-polynomial-higher-than-the-last">Loop over 10 times. Each adding one more degree of polynomial higher than the last.</h1> <p>for degree in range(1,11):</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Add polynomial features to the training set
poly = PolynomialFeatures(degree, include_bias=False)
X_train_mapped = poly.fit_transform(x_train)

# Scale the training set
scaler_poly = StandardScaler()
X_train_mapped_scaled = scaler_poly.fit_transform(X_train_mapped)
scalers.append(scaler_poly)

# Create and train the model
model = LinearRegression()
model.fit(X_train_mapped_scaled, y_train )
models.append(model)

# Compute the training MSE
yhat = model.predict(X_train_mapped_scaled)
train_mse = mean_squared_error(y_train, yhat) / 2
train_mses.append(train_mse)

# Add polynomial features and scale the cross validation set
poly = PolynomialFeatures(degree, include_bias=False)
X_cv_mapped = poly.fit_transform(x_cv)
X_cv_mapped_scaled = scaler_poly.transform(X_cv_mapped)

# Compute the cross validation MSE
yhat = model.predict(X_cv_mapped_scaled)
cv_mse = mean_squared_error(y_cv, yhat) / 2
cv_mses.append(cv_mse)
</code></pre></div></div> <h1 id="plot-the-results">Plot the results</h1> <p>degrees=range(1,11) utils.plot_train_cv_mses(degrees, train_mses, cv_mses, title=”degree of polynomial vs. train and CV MSEs”)</p> <h1 id="get-the-model-with-the-lowest-cv-mse-add-1-because-list-indices-start-at-0">Get the model with the lowest CV MSE (add 1 because list indices start at 0)</h1> <h1 id="this-also-corresponds-to-the-degree-of-the-polynomial-added">This also corresponds to the degree of the polynomial added</h1> <p>degree = np.argmin(cv_mses) + 1 print(f”Lowest CV MSE is found in the model with degree={degree}”)</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="Machine"/><category term="Learning"/><category term="Masters"/><summary type="html"><![CDATA[Study topics]]></summary></entry><entry><title type="html">Advance Learning Algorithms</title><link href="https://rutvikjoshi63.github.io/blog/2023/Advance-Learning-Algorithm/" rel="alternate" type="text/html" title="Advance Learning Algorithms"/><published>2023-10-31T10:56:00+00:00</published><updated>2023-10-31T10:56:00+00:00</updated><id>https://rutvikjoshi63.github.io/blog/2023/Advance-Learning-Algorithm</id><content type="html" xml:base="https://rutvikjoshi63.github.io/blog/2023/Advance-Learning-Algorithm/"><![CDATA[<h2 id="topics-covered-in-advance-learning-algorithms">Topics covered in Advance Learning Algorithms</h2> <h1 id="week-1">Week 1</h1> <h1 id="week-2">Week 2</h1> <ul> <li>a layer is a grouping of neurons in a neural network</li> <li> <p>an activation is the number calculated by a neuron (and “activations” is a vector that is output by a layer that contains multiple neurons) <img src="/assets/img/Andrew_Algorithm_w1.png" alt="_config.yml"/></p> <p><img src="/assets/img/Andrew_w1_Notation.png" alt="_config.yml"/></p> </li> <li>Computation Graph based on Graph Theory <img src="/assets/img/AndrewNg/AdvAlgorithm_w2_GraphTheory.png" alt="_config.yml"/> <h1 id="week-3">Week 3</h1> <p>Evaluation of a model: If fitting a function to predict housing prices or some other regression problem, one model you might consider is to fit a linear/polynomial model.</p> </li> </ul> <p>One procedure you could try, this turns out not to be the best procedure, but one thing you could try is, look at all of these J tests, and see which one gives you the lowest value. Say, you find that, J test for the fifth order polynomial for w^5, b^5 turns out to be the lowest. If that’s the case, then you might decide that the fifth order polynomial d equals 5 does best, and choose that model for your application.</p> <p>The reason this procedure is flawed is J test of w^5, b^5 is likely to be an optimistic estimate of the generalization error. In other words, it is likely to be lower than the actual generalization error.</p> <p>we’re going to introduce a new subset of the data called the cross-validation/validation/dev/test set. The name cross-validation refers to that this is an extra dataset that we’re going to use to check or cross check the validity or really the accuracy of different models. <img src="/assets/img/AndrewNg/AdvAlgorithm_w3_Cross-ValidationLossfun.png" alt="_config.yml"/> <img src="/assets/img/AndrewNg/AdvAlgorithm_w3_Cross-ValidationNeuralNetwork.png" alt="_config.yml"/></p> <h1 id="week-4">Week 4</h1>]]></content><author><name></name></author><category term="sample-posts"/><category term="Machine"/><category term="Learning"/><category term="Masters"/><summary type="html"><![CDATA[Study topics]]></summary></entry><entry><title type="html">Flexure Member Output</title><link href="https://rutvikjoshi63.github.io/blog/2023/redirect/" rel="alternate" type="text/html" title="Flexure Member Output"/><published>2023-10-01T17:39:00+00:00</published><updated>2023-10-01T17:39:00+00:00</updated><id>https://rutvikjoshi63.github.io/blog/2023/redirect</id><content type="html" xml:base="https://rutvikjoshi63.github.io/blog/2023/redirect/"><![CDATA[<p>Redirecting to another page.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Design Output generated using PyLaTeX]]></summary></entry><entry><title type="html">Data Structures &amp;amp; Algorithms</title><link href="https://rutvikjoshi63.github.io/blog/2023/Data-Structures-Algorithms/" rel="alternate" type="text/html" title="Data Structures &amp;amp; Algorithms"/><published>2023-10-01T10:56:00+00:00</published><updated>2023-10-01T10:56:00+00:00</updated><id>https://rutvikjoshi63.github.io/blog/2023/Data-Structures-Algorithms</id><content type="html" xml:base="https://rutvikjoshi63.github.io/blog/2023/Data-Structures-Algorithms/"><![CDATA[<h2 id="geeks-for-geeks">Geeks for Geeks</h2> <h1 id="analysis-of-algorithms">Analysis of Algorithms</h1> <h1 id="mathematics">Mathematics</h1> <h1 id="list-sets-dictionary"><a href="https://rutvikjoshi63.github.io/blog/2023/GFG-list/">List, Sets, Dictionary</a></h1> <ul> <li> <h1 id="hashing">Hashing</h1> </li> <li> <h1 id="working">Working:</h1> </li> <li> <h1 id="advantages">Advantages:</h1> </li> <li> <h1 id="disadvantages">DisAdvantages:</h1> </li> <li> <h1 id="other-functions">Other functions</h1> </li> <li> <h1 id="slicing">Slicing</h1> </li> </ul> <p><em>## A New Post for resources to learn Data Structures &amp; Algorithms</em></p> <ol> <li>website <ul> <li><a href="https://www.codewithharry.com/videos/data-structures-and-algorithms-in-hindi-1/">CodeWithHarry</a>.</li> </ul> </li> <li>videos <ul> <li><a href="https://www.youtube.com/watch?v=5_5oE5lgrhw&amp;list=PLu0W_9lII9ahIappRPN0MCAgtOu3lQjQi&amp;ab_channel=CodeWithHarry">CodeWithHarry</a> playlist <a href="https://www.youtube.com/watch?v=f9Aje_cN_CY&amp;ab_channel=CampusX">alternative if didn’t understand</a></li> <li><a href="https://www.youtube.com/watch?v=zWg7U0OEAoE">nptelhrd</a>playlist</li> <li><a href="https://www.youtube.com/watch?v=pkYVOmU3MgA&amp;ab_channel=freeCodeCamp.org">freeCodeCamp in jupyter notebook</a> <a href="https://jovian.com/learn/data-structures-and-algorithms-in-python">jovian</a></li> </ul> </li> <li>Practise and competitive matches <ul> <li><a href="https://leetcode.com/">leetcode</a></li> <li><a href="https://neetcode.io/courses/dsa-for-beginners/2">neetcode</a></li> </ul> </li> <li>Pdfs <ul> <li><a href="E:\study\Software\DSA\Algorithms_4th_Robert_Sedgewick,_Kevin_Wayne">Coursera-Algorithms, Princeton University</a>-<a href="https://www.coursera.org/lecture/algorithms-part1/quick-union-improvements-RZW72">coursera</a></li> <li><a href="E:\study\Software\DSA\UC SanDiago">Coursera-UC SanDiago</a></li> <li><a href="E:\study\Software\DSA\DSA notes by Ritika">Ritika notes from LinkedIn</a></li> </ul> </li> </ol> <hr/> <hr/>]]></content><author><name>Rutvik Joshi</name></author><category term="Machine"/><category term="Learning"/><category term="Masters"/><summary type="html"><![CDATA[Study resources for Machine Learning]]></summary></entry><entry><title type="html">Hashing</title><link href="https://rutvikjoshi63.github.io/blog/2023/GFG-Hashing/" rel="alternate" type="text/html" title="Hashing"/><published>2023-10-01T10:56:00+00:00</published><updated>2023-10-01T10:56:00+00:00</updated><id>https://rutvikjoshi63.github.io/blog/2023/GFG-Hashing</id><content type="html" xml:base="https://rutvikjoshi63.github.io/blog/2023/GFG-Hashing/"><![CDATA[<h2 id="geeks-for-geeks">Geeks for Geeks</h2> <h1 id="hashing">Hashing</h1> <p>Dictionary and Set implement.</p> <h1 id="applications">Applications:</h1> <ul> <li>Dictionary</li> <li>Database indexing</li> <li>Cryptography</li> <li>Caches</li> <li>Data from Databases</li> </ul> <h1 id="not-used-for-">Not used for :</h1> <ul> <li>Finding closes value</li> <li>Sorted order</li> <li> <p>Prefix searching -(Trie is better)</p> </li> <li> <h1 id="popular-functions">Popular functions</h1> <ol> <li>Append()</li> <li>Insert(loc, var)</li> <li>var in list</li> <li>count(var)</li> <li>index(var)–error if abscent index(var, start, end)</li> <li>remove(var)</li> <li>pop() –returns, index optional</li> <li>del list[index start : end]</li> <li>max, min, sum,list.reverse(), sort() –for strings only sum will not work</li> <li>map: ```python # input size of the list n = int(input(“Enter the size of list : “)) # store integrs in a list using map, # split and strip functions lst = list(map(int, input(“Enter the integer<br/> elements:”).strip().split()))[:n]</li> </ol> <p># printing the list print(‘The list is:’, lst)</p> <p>```</p> <ol> <li>Clear() Removes all items from the list</li> <li>copy() Returns a copy of the list</li> </ol> </li> <li> <h1 id="working">Working:</h1> <ul> <li>Direct Address Table - problem Not handle large keys, floating point strings</li> <li>Hash function- need to be fast, uniformly distribute large keys Examples</li> </ul> </li> <li> <h1 id="advantages">Advantages:</h1> <ul> <li>Best for Search, Insert, Delete in BigO(1)</li> <li>insertion ovverides if exist already, no duplicates</li> </ul> </li> <li> <h1 id="disadvantages">DisAdvantages:</h1> <ul> <li>Strict search, yes or No.</li> <li>No sorted order</li> <li>Not handle large keys, floating point strings</li> </ul> </li> <li> <h1 id="other-functions">Other functions</h1> <ol> <li>reduce() apply a particular function passed in its argument to all of the list elements stores the intermediate result and only returns the final summation value</li> <li>sum() Sums up the numbers in the list</li> <li>ord() Returns an integer representing the Unicode code point of the given Unicode character</li> <li>cmp() This function returns 1 if the first list is “greater” than the second list</li> <li>max() return maximum element of a given list</li> <li>min() return minimum element of a given list</li> <li>all() Returns true if all element is true or if the list is empty</li> <li>any() return true if any element of the list is true. if the list is empty, return false</li> <li>len() Returns length of the list or size of the list</li> <li>enumerate() Returns enumerate object of the list</li> <li>accumulate() apply a particular function passed in its argument to all of the list elements returns a list containing the intermediate results</li> <li>filter() tests if each element of a list is true or not</li> <li>map() returns a list of the results after applying the given function to each item of a given iterable</li> <li>lambda() This function can have any number of arguments but only one expression, which is evaluated and returned.</li> </ol> </li> <li> <h1 id="slicing">Slicing</h1> <ol> <li>Negative steps to reverse list</li> <li>gives different for list only. tuple gives same back…since immutable</li> </ol> </li> <li> <h1 id="comprehensions">Comprehensions</h1> </li> </ul> <h1 id="sets">Sets</h1> <p>do not contain duplicates. {}</p> <ul> <li> <h1 id="sets-1">Sets</h1> </li> </ul> <h1 id="dictionary">Dictionary</h1> <p>do not contain duplicates. {}</p> <ul> <li> <h1 id="comprehensions-1">Comprehensions</h1> <ul> <li>list(li) to set, dictionay d1 = {x:x**3 for x in l1} d1 = {x:f”ID{x}” for x in l1} d1 = {l2[i]:l3[i] for i in range(len(l2))} or **## d3 = dict(zip(l2,l3)) **</li> <li>reverse dictionary d2 = {v:k for (k,v) in d1.items()}</li> </ul> </li> </ul> <p><em>## A New Post for resources to learn Data Structures &amp; Algorithms</em></p> <ol> <li>website <ul> <li><a href="https://www.codewithharry.com/videos/data-structures-and-algorithms-in-hindi-1/">CodeWithHarry</a>.</li> </ul> </li> <li>videos <ul> <li><a href="https://www.youtube.com/watch?v=5_5oE5lgrhw&amp;list=PLu0W_9lII9ahIappRPN0MCAgtOu3lQjQi&amp;ab_channel=CodeWithHarry">CodeWithHarry</a> playlist <a href="https://www.youtube.com/watch?v=f9Aje_cN_CY&amp;ab_channel=CampusX">alternative if didn’t understand</a></li> <li><a href="https://www.youtube.com/watch?v=zWg7U0OEAoE">nptelhrd</a>playlist</li> <li><a href="https://www.youtube.com/watch?v=pkYVOmU3MgA&amp;ab_channel=freeCodeCamp.org">freeCodeCamp in jupyter notebook</a> <a href="https://jovian.com/learn/data-structures-and-algorithms-in-python">jovian</a></li> </ul> </li> <li>Practise and competitive matches <ul> <li><a href="https://leetcode.com/">leetcode</a></li> <li><a href="https://neetcode.io/courses/dsa-for-beginners/2">neetcode</a></li> </ul> </li> <li>Pdfs <ul> <li><a href="E:\study\Software\DSA\Algorithms_4th_Robert_Sedgewick,_Kevin_Wayne">Coursera-Algorithms, Princeton University</a>-<a href="https://www.coursera.org/lecture/algorithms-part1/quick-union-improvements-RZW72">coursera</a></li> <li><a href="E:\study\Software\DSA\UC SanDiago">Coursera-UC SanDiago</a></li> <li><a href="E:\study\Software\DSA\DSA notes by Ritika">Ritika notes from LinkedIn</a></li> </ul> </li> </ol> <hr/> <hr/>]]></content><author><name>Rutvik Joshi</name></author><category term="Data"/><category term="Structures"/><category term="&amp;"/><category term="Algorithms"/><summary type="html"><![CDATA[Study resources for Data Structures & Algorithms]]></summary></entry><entry><title type="html">Lists</title><link href="https://rutvikjoshi63.github.io/blog/2023/GFG-list/" rel="alternate" type="text/html" title="Lists"/><published>2023-10-01T10:56:00+00:00</published><updated>2023-10-01T10:56:00+00:00</updated><id>https://rutvikjoshi63.github.io/blog/2023/GFG-list</id><content type="html" xml:base="https://rutvikjoshi63.github.io/blog/2023/GFG-list/"><![CDATA[<h2 id="geeks-for-geeks">Geeks for Geeks</h2> <h1 id="list">List</h1> <ul> <li> <h1 id="popular-functions">Popular functions</h1> <ol> <li>Append()</li> <li>Insert(loc, var)</li> <li>var in list</li> <li>count(var)</li> <li>index(var)–error if abscent index(var, start, end)</li> <li>remove(var)</li> <li>pop() –returns, index optional</li> <li>del list[index start : end]</li> <li>max, min, sum,list.reverse(), sort() –for strings only sum will not work</li> <li>map: ```python # input size of the list n = int(input(“Enter the size of list : “)) # store integrs in a list using map, # split and strip functions lst = list(map(int, input(“Enter the integer<br/> elements:”).strip().split()))[:n]</li> </ol> <p># printing the list print(‘The list is:’, lst)</p> <p>```</p> <ol> <li>Clear() Removes all items from the list</li> <li>copy() Returns a copy of the list</li> </ol> </li> <li> <h1 id="working">Working:</h1> <ul> <li>Use array Data Structure (Array of references which are continous) . Actual items are not continous Dynamic insertion. Allocate extra memory</li> <li>Preallocate some space. If becomes full <ol> <li>Allocate new space (multiply by x=1.125)</li> <li>Copy old space to new</li> <li>Free old space <img src="/assets/img/gfg_timecomplexity_list.png" alt="_config.yml"/></li> </ol> </li> </ul> </li> <li> <h1 id="advantages">Advantages:</h1> <ul> <li>Random Access (ith item in constant time, address computations done to find location of ith item)</li> <li>Cache friendly</li> <li>Dynamic size</li> <li>Flexible types</li> </ul> </li> <li> <h1 id="disadvantages">DisAdvantages:</h1> <ul> <li>Insertion, Deletion and search are slow.Take linear time</li> </ul> </li> <li> <h1 id="other-functions">Other functions</h1> <ol> <li>reduce() apply a particular function passed in its argument to all of the list elements stores the intermediate result and only returns the final summation value</li> <li>sum() Sums up the numbers in the list</li> <li>ord() Returns an integer representing the Unicode code point of the given Unicode character</li> <li>cmp() This function returns 1 if the first list is “greater” than the second list</li> <li>max() return maximum element of a given list</li> <li>min() return minimum element of a given list</li> <li>all() Returns true if all element is true or if the list is empty</li> <li>any() return true if any element of the list is true. if the list is empty, return false</li> <li>len() Returns length of the list or size of the list</li> <li>enumerate() Returns enumerate object of the list</li> <li>accumulate() apply a particular function passed in its argument to all of the list elements returns a list containing the intermediate results</li> <li>filter() tests if each element of a list is true or not</li> <li>map() returns a list of the results after applying the given function to each item of a given iterable</li> <li>lambda() This function can have any number of arguments but only one expression, which is evaluated and returned.</li> </ol> </li> <li> <h1 id="slicing">Slicing</h1> <ol> <li>Negative steps to reverse list</li> <li>gives different for list only. tuple gives same back…since immutable</li> </ol> </li> <li> <h1 id="comprehensions">Comprehensions</h1> </li> </ul> <h1 id="sets">Sets</h1> <p>do not contain duplicates. {}</p> <ul> <li> <h1 id="sets-1">Sets</h1> </li> </ul> <h1 id="dictionary">Dictionary</h1> <p>do not contain duplicates. {}</p> <ul> <li> <h1 id="comprehensions-1">Comprehensions</h1> <ul> <li>list(li) to set, dictionay d1 = {x:x**3 for x in l1} d1 = {x:f”ID{x}” for x in l1} d1 = {l2[i]:l3[i] for i in range(len(l2))} or **## d3 = dict(zip(l2,l3)) **</li> <li>reverse dictionary d2 = {v:k for (k,v) in d1.items()}</li> </ul> </li> </ul> <p><em>## A New Post for resources to learn Data Structures &amp; Algorithms</em></p> <ol> <li>website <ul> <li><a href="https://www.codewithharry.com/videos/data-structures-and-algorithms-in-hindi-1/">CodeWithHarry</a>.</li> </ul> </li> <li>videos <ul> <li><a href="https://www.youtube.com/watch?v=5_5oE5lgrhw&amp;list=PLu0W_9lII9ahIappRPN0MCAgtOu3lQjQi&amp;ab_channel=CodeWithHarry">CodeWithHarry</a> playlist <a href="https://www.youtube.com/watch?v=f9Aje_cN_CY&amp;ab_channel=CampusX">alternative if didn’t understand</a></li> <li><a href="https://www.youtube.com/watch?v=zWg7U0OEAoE">nptelhrd</a>playlist</li> <li><a href="https://www.youtube.com/watch?v=pkYVOmU3MgA&amp;ab_channel=freeCodeCamp.org">freeCodeCamp in jupyter notebook</a> <a href="https://jovian.com/learn/data-structures-and-algorithms-in-python">jovian</a></li> </ul> </li> <li>Practise and competitive matches <ul> <li><a href="https://leetcode.com/">leetcode</a></li> <li><a href="https://neetcode.io/courses/dsa-for-beginners/2">neetcode</a></li> </ul> </li> <li>Pdfs <ul> <li><a href="E:\study\Software\DSA\Algorithms_4th_Robert_Sedgewick,_Kevin_Wayne">Coursera-Algorithms, Princeton University</a>-<a href="https://www.coursera.org/lecture/algorithms-part1/quick-union-improvements-RZW72">coursera</a></li> <li><a href="E:\study\Software\DSA\UC SanDiago">Coursera-UC SanDiago</a></li> <li><a href="E:\study\Software\DSA\DSA notes by Ritika">Ritika notes from LinkedIn</a></li> </ul> </li> </ol> <hr/> <hr/>]]></content><author><name>Rutvik Joshi</name></author><category term="Data"/><category term="Structures"/><category term="&amp;"/><category term="Algorithms"/><summary type="html"><![CDATA[Study resources for Data Structures & Algorithms]]></summary></entry><entry><title type="html">Neural Network Evaluation</title><link href="https://rutvikjoshi63.github.io/blog/2023/NeuralNetworkEvaluation/" rel="alternate" type="text/html" title="Neural Network Evaluation"/><published>2023-10-01T10:56:00+00:00</published><updated>2023-10-01T10:56:00+00:00</updated><id>https://rutvikjoshi63.github.io/blog/2023/NeuralNetworkEvaluation</id><content type="html" xml:base="https://rutvikjoshi63.github.io/blog/2023/NeuralNetworkEvaluation/"><![CDATA[<h2 id="topics-covered-in-supervised-machine-learning">Topics covered in Supervised Machine Learning</h2> <p>It is usually a good idea to perform feature scaling to help your model converge faster. This is especially true if your input features have widely different ranges of values. For that, you will use the <a href="https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html"><code class="language-plaintext highlighter-rouge">StandardScaler</code></a> class from scikit-learn. This computes the z-score of your inputs. As a refresher, the z-score is given by the equation:</p> \[z = \frac{x - \mu}{\sigma}\] <p>where $\mu$ is the mean of the feature values and $\sigma$ is the standard deviation.</p> <h1 id="initialize-the-class">Initialize the class</h1> <p>scaler_linear = StandardScaler()</p> <h1 id="compute-the-mean-and-standard-deviation-of-the-training-set-then-transform-it">Compute the mean and standard deviation of the training set then transform it</h1> <p>X_train_scaled = scaler_linear.fit_transform(x_train)</p> <p>print(f”Computed mean of the training set: {scaler_linear.mean_.squeeze():.2f}”) print(f”Computed standard deviation of the training set: {scaler_linear.scale_.squeeze():.2f}”)</p> <h3 id="train-the-model">Train the model</h3> <p>Next, you will create and train a regression model. For this lab, you will use the <a href="https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html">LinearRegression</a> class but take note that there are other <a href="https://scikit-learn.org/stable/modules/classes.html#classical-linear-regressors">linear regressors</a> which you can also use.</p> <h1 id="initialize-the-class-1">Initialize the class</h1> <p>linear_model = LinearRegression()</p> <h1 id="train-the-model-1">Train the model</h1> <p>linear_model.fit(X_train_scaled, y_train )</p> <h3 id="evaluate-the-model">Evaluate the Model</h3> <p>To evaluate the performance of your model, you will measure the error for the training and cross validation sets. For the training error, recall the equation for calculating the mean squared error (MSE):</p> \[J_{train}(\vec{w}, b) = \frac{1}{2m_{train}}\left[\sum_{i=1}^{m_{train}}(f_{\vec{w},b}(\vec{x}_{train}^{(i)}) - y_{train}^{(i)})^2\right]\] <p>Scikit-learn also has a built-in <a href="https://scikit-learn.org/stable/modules/generated/sklearn.metrics.mean_squared_error.html"><code class="language-plaintext highlighter-rouge">mean_squared_error()</code></a> function that you can use. Take note though that <a href="https://scikit-learn.org/stable/modules/model_evaluation.html#mean-squared-error">as per the documentation</a>, scikit-learn’s implementation only divides by <code class="language-plaintext highlighter-rouge">m</code> and not <code class="language-plaintext highlighter-rouge">2*m</code>, where <code class="language-plaintext highlighter-rouge">m</code> is the number of examples.</p> <h1 id="feed-the-scaled-training-set-and-get-the-predictions">Feed the scaled training set and get the predictions</h1> <p>yhat = linear_model.predict(X_train_scaled)</p> <h1 id="use-scikit-learns-utility-function-and-divide-by-2">Use scikit-learn’s utility function and divide by 2</h1> <p>print(f”training MSE (using sklearn function): {mean_squared_error(y_train, yhat) / 2}”)</p> <p>You can then compute the MSE for the cross validation set with basically the same equation.</p> <ul> <li>Say that your training set has an input feature equal to <code class="language-plaintext highlighter-rouge">500</code> which is scaled down to <code class="language-plaintext highlighter-rouge">0.5</code> using the z-score.</li> <li>After training, your model is able to accurately map this scaled input <code class="language-plaintext highlighter-rouge">x=0.5</code> to the target output <code class="language-plaintext highlighter-rouge">y=300</code>.</li> <li>Now let’s say that you deployed this model and one of your users fed it a sample equal to <code class="language-plaintext highlighter-rouge">500</code>.</li> <li>If you get this input sample’s z-score using any other values of the mean and standard deviation, then it might not be scaled to <code class="language-plaintext highlighter-rouge">0.5</code> and your model will most likely make a wrong prediction (i.e. not equal to <code class="language-plaintext highlighter-rouge">y=300</code>).</li> </ul> <p>You will scale the cross validation set below by using the same <code class="language-plaintext highlighter-rouge">StandardScaler</code> you used earlier but only calling its <a href="https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html#sklearn.preprocessing.StandardScaler.transform"><code class="language-plaintext highlighter-rouge">transform()</code></a> method instead of <a href="https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html#sklearn.preprocessing.StandardScaler.fit_transform"><code class="language-plaintext highlighter-rouge">fit_transform()</code></a>.</p> <h1 id="scale-the-cross-validation-set-using-the-mean-and-standard-deviation-of-the-training-set">Scale the cross validation set using the mean and standard deviation of the training set</h1> <p>X_cv_scaled = scaler_linear.transform(x_cv)</p> <p>print(f”Mean used to scale the CV set: {scaler_linear.mean_.squeeze():.2f}”) print(f”Standard deviation used to scale the CV set: {scaler_linear.scale_.squeeze():.2f}”)</p> <h1 id="feed-the-scaled-cross-validation-set">Feed the scaled cross validation set</h1> <p>yhat = linear_model.predict(X_cv_scaled)</p> <h1 id="use-scikit-learns-utility-function-and-divide-by-2-1">Use scikit-learn’s utility function and divide by 2</h1> <p>print(f”Cross validation MSE: {mean_squared_error(y_cv, yhat) / 2}”)</p> <h2 id="adding-polynomial-features">Adding Polynomial Features</h2> <h3 id="create-the-additional-features">Create the additional features</h3> <p>First, you will generate the polynomial features from your training set. The code below demonstrates how to do this using the <a href="https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.PolynomialFeatures.html"><code class="language-plaintext highlighter-rouge">PolynomialFeatures</code></a> class. It will create a new input feature which has the squared values of the input <code class="language-plaintext highlighter-rouge">x</code> (i.e. degree=2).</p> <h1 id="instantiate-the-class-to-make-polynomial-features">Instantiate the class to make polynomial features</h1> <p>poly = PolynomialFeatures(degree=2, include_bias=False)</p> <h1 id="compute-the-number-of-features-and-transform-the-training-set">Compute the number of features and transform the training set</h1> <p>X_train_mapped = poly.fit_transform(x_train)</p> <h1 id="preview-the-first-5-elements-of-the-new-training-set-left-column-is-x-and-right-column-is-x2">Preview the first 5 elements of the new training set. Left column is <code class="language-plaintext highlighter-rouge">x</code> and right column is <code class="language-plaintext highlighter-rouge">x^2</code></h1> <h1 id="note-the-enumber-in-the-output-denotes-how-many-places-the-decimal-point-should">Note: The <code class="language-plaintext highlighter-rouge">e+&lt;number&gt;</code> in the output denotes how many places the decimal point should</h1> <h1 id="be-moved-for-example-324e03-is-equal-to-3240">be moved. For example, <code class="language-plaintext highlighter-rouge">3.24e+03</code> is equal to <code class="language-plaintext highlighter-rouge">3240</code></h1> <p>print(X_train_mapped[:5]) You will then scale the inputs as before to narrow down the range of values.</p> <h1 id="instantiate-the-class">Instantiate the class</h1> <p>scaler_poly = StandardScaler()</p> <h1 id="compute-the-mean-and-standard-deviation-of-the-training-set-then-transform-it-1">Compute the mean and standard deviation of the training set then transform it</h1> <p>X_train_mapped_scaled = scaler_poly.fit_transform(X_train_mapped)</p> <h1 id="preview-the-first-5-elements-of-the-scaled-training-set">Preview the first 5 elements of the scaled training set.</h1> <p>print(X_train_mapped_scaled[:5]) You can then proceed to train the model. After that, you will measure the model’s performance against the cross validation set. Like before, you should make sure to perform the same transformations as you did in the training set. You will add the same number of polynomial features then scale the range of values.</p> <h1 id="initialize-the-class-2">Initialize the class</h1> <p>model = LinearRegression()</p> <h1 id="train-the-model-2">Train the model</h1> <p>model.fit(X_train_mapped_scaled, y_train )</p> <h1 id="compute-the-training-mse">Compute the training MSE</h1> <p>yhat = model.predict(X_train_mapped_scaled) print(f”Training MSE: {mean_squared_error(y_train, yhat) / 2}”)</p> <h1 id="add-the-polynomial-features-to-the-cross-validation-set">Add the polynomial features to the cross validation set</h1> <p>X_cv_mapped = poly.transform(x_cv)</p> <h1 id="scale-the-cross-validation-set-using-the-mean-and-standard-deviation-of-the-training-set-1">Scale the cross validation set using the mean and standard deviation of the training set</h1> <p>X_cv_mapped_scaled = scaler_poly.transform(X_cv_mapped)</p> <h1 id="compute-the-cross-validation-mse">Compute the cross validation MSE</h1> <p>yhat = model.predict(X_cv_mapped_scaled) print(f”Cross validation MSE: {mean_squared_error(y_cv, yhat) / 2}”)</p> <p><strong>You can create a loop that contains all the steps in the previous code cells. Here is one implementation that adds polynomial features up to degree=10.</strong></p> <h1 id="initialize-lists-containing-the-lists-models-and-scalers">Initialize lists containing the lists, models, and scalers</h1> <p>train_mses = [] cv_mses = [] models = [] scalers = []</p> <h1 id="loop-over-10-times-each-adding-one-more-degree-of-polynomial-higher-than-the-last">Loop over 10 times. Each adding one more degree of polynomial higher than the last.</h1> <p>for degree in range(1,11):</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Add polynomial features to the training set
poly = PolynomialFeatures(degree, include_bias=False)
X_train_mapped = poly.fit_transform(x_train)

# Scale the training set
scaler_poly = StandardScaler()
X_train_mapped_scaled = scaler_poly.fit_transform(X_train_mapped)
scalers.append(scaler_poly)

# Create and train the model
model = LinearRegression()
model.fit(X_train_mapped_scaled, y_train )
models.append(model)

# Compute the training MSE
yhat = model.predict(X_train_mapped_scaled)
train_mse = mean_squared_error(y_train, yhat) / 2
train_mses.append(train_mse)

# Add polynomial features and scale the cross validation set
poly = PolynomialFeatures(degree, include_bias=False)
X_cv_mapped = poly.fit_transform(x_cv)
X_cv_mapped_scaled = scaler_poly.transform(X_cv_mapped)

# Compute the cross validation MSE
yhat = model.predict(X_cv_mapped_scaled)
cv_mse = mean_squared_error(y_cv, yhat) / 2
cv_mses.append(cv_mse)
</code></pre></div></div> <h1 id="plot-the-results">Plot the results</h1> <p>degrees=range(1,11) utils.plot_train_cv_mses(degrees, train_mses, cv_mses, title=”degree of polynomial vs. train and CV MSEs”)</p> <h1 id="get-the-model-with-the-lowest-cv-mse-add-1-because-list-indices-start-at-0">Get the model with the lowest CV MSE (add 1 because list indices start at 0)</h1> <h1 id="this-also-corresponds-to-the-degree-of-the-polynomial-added">This also corresponds to the degree of the polynomial added</h1> <p>degree = np.argmin(cv_mses) + 1 print(f”Lowest CV MSE is found in the model with degree={degree}”)</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="Machine"/><category term="Learning"/><category term="Masters"/><summary type="html"><![CDATA[Study topics]]></summary></entry><entry><title type="html">Machine/Deep Learning</title><link href="https://rutvikjoshi63.github.io/blog/2023/Machine-Learning-roadmap/" rel="alternate" type="text/html" title="Machine/Deep Learning"/><published>2023-08-13T10:56:00+00:00</published><updated>2023-08-13T10:56:00+00:00</updated><id>https://rutvikjoshi63.github.io/blog/2023/Machine-Learning-roadmap</id><content type="html" xml:base="https://rutvikjoshi63.github.io/blog/2023/Machine-Learning-roadmap/"><![CDATA[<h2 id="resources-to-learn-machine-learning">Resources to learn machine learning</h2> <h3 id="parallel-conquring-technique">Parallel Conquring Technique</h3> <ol> <li><a href="https://rutvikjoshi63.github.io/blog/2023/Machine-Learning-roadmap/#mathematics">Mathematics</a></li> <li><a href="https://rutvikjoshi63.github.io/blog/2023/Machine-Learning-roadmap/#libraries">Get familiar with different libraries and concepts</a></li> <li>Zero to Mastery Machine Learning for <a href="https://github.com/mrdbourke/zero-to-mastery-ml">Quick recap</a></li> <li><a href="https://www.scaler.com/topics/course/free-supervised-learning-course/">scaler free</a></li> <li>Andrew Ng Machine Learning Specialization Course<br/> or link for <a href="https://www.youtube.com/watch?v=jGwO_UgTS7I&amp;t=11s&amp;ab_channel=StanfordOnline">youtube</a> or <a href="https://see.stanford.edu/Course/CS229">Stanford Engineering Everywhere- CS229 - Machine Learning</a></li> <li> <h2 id="-python-ml-projects-homerutvikdocumentsroboticsrobotics-drive-dml">✨ Python ML Projects (/home/rutvik/Documents/Robotics/Robotics drive D/ML)</h2> <h3 id="mathematics">Mathematics</h3> <ul> <li>Video format</li> </ul> </li> <li> <p><a href="https://www.youtube.com/watch?v=LZzq1zSL1bs&amp;ab_channel=KrishNaik">Complete Statistics For Data Science In 6 hours By Krish Naik</a></p> </li> <li> <p><a href="https://www.youtube.com/watch?v=4jRBRDbJemM&amp;list=PLblh5JKOoLUICTaGLRoHQDuF_7q2GfuJF&amp;index=23&amp;ab_channel=StatQuestwithJoshStarmer">Stat Quest for concept clarification</a></p> </li> <li><a href="https://www.youtube.com/watch?v=r4sgKrRL2Ys&amp;list=PL1xHD4vteKYVpaIiy295pg6_SY5qznc77&amp;ab_channel=MachineLearning-BalaramanRavindran">Machine Learning- Balaraman Ravindran 88 videos</a></li> </ol> <ul> <li> <p>Deep Learning Mathematics Roadmap &amp; resources<a href="https://github.com/h9-tect/ML-DL_Roadmap./tree/main"> here</a>.</p> </li> <li> <p>PDF books shared by Sina <a href="https://rutvikjoshi63.github.io/news/">here</a></p> </li> </ul> <details><summary>Click here to know more</summary> <p><em>LinearAlgebra</em></p> <ul> <li>file:///home/rutvik/Documents/Robotics/Robotics%20drive%20D/LinearAlgebra/linalg.pdf <em>Statistics</em></li> <li>file:///home/rutvik/Documents/Robotics/Robotics%20drive%20D/Statistics/astats.pdf</li> </ul> </details> <ul> <li> <h2 id="discord-channel">Discord Channel</h2> <h3 id="libraries">Libraries</h3> <ul> <li><a href="https://www.youtube.com/watch?v=czQO1_GEEos&amp;list=PLZoTAELRMXVPBTrWtJkn3wWQxZkmTXGwe">Machine-Learning-in-90-days</a></li> <li><a href="https://www.youtube.com/watch?v=BN0nnnadFl0&amp;list=PLTDARY42LDV4qqiJd1Z1tShm3mp9-rP4v&amp;index=9&amp;ab_channel=KrishNaikHindi">Python Playlist(Krish Naik Hindi)</a></li> <li><a href="https://www.youtube.com/watch?v=ua-CiDNNj30&amp;list=PLWKjhJtqVAblQe2CCWqV4Zy3LY01Z8aF1">Data Science freecode camp playlist</a></li> <li><a href="https://scikit-learn.org/stable/getting_started.html">scikit-learn</a> <a href="https://scikit-learn.org/stable/user_guide.html">user guide</a></li> <li><a href="https://archive.ics.uci.edu/">Data repo</a></li> <li> <h2 id="mlcheatsheets_for_ai_neural_networks_ml_dl__big_data"><a href="E:\MLCheatsheets_for_AI_Neural_Networks_ML_DL__Big_Data.pdf">MLCheatsheets_for_AI_Neural_Networks_ML_DL__Big_Data</a></h2> <h3 id="computer-vision">Computer vision</h3> </li> </ul> </li> <li> <p><a href="https://www.youtube.com/watch?v=sXqWrtUseK8&amp;ab_channel=KrishNaik">Computer vision by Krish</a></p> </li> <li> <p><a href="https://www.youtube.com/watch?v=oXlwWbU8l2o&amp;ab_channel=freeCodeCamp.org">OpenCV Course - Full Tutorial with Python freeCodeCamp.</a></p> </li> <li> <p><a href="https://www.youtube.com/watch?v=IA3WxTTPXqQ&amp;ab_channel=freeCodeCamp.org">Deep Learning for Computer Vision with Python and TensorFlow – Complete Course freeCodeCamp.org</a></p> </li> <li> <p><a href="https://www.youtube.com/watch?v=nVhau51w6dM&amp;ab_channel=freeCodeCamp.org">Convolutional Neural Network freeCodeCamp</a></p> </li> <li> <h2 id="convolutional-neural-networks-for-visual-recognition"><a href="https://www.youtube.com/watch?v=vT1JzLTH4G4&amp;t=33s&amp;ab_channel=StanfordUniversitySchoolofEngineering">Convolutional Neural Networks for Visual Recognition</a></h2> <h3 id="nlp">NLP</h3> </li> <li> <h2 id="nlp-with-deep-learning"><a href="https://www.youtube.com/watch?v=rmVRLeJRkl4&amp;t=2s&amp;ab_channel=StanfordOnline">NLP with Deep Learning</a></h2> <h3 id="exercise">Exercise</h3> <p><a href="https://www.kaggle.com/competitions">kaggle</a> —</p> <h3 id="current-progress">Current progress:</h3> <ol> <li><a href="https://www.youtube.com/watch?v=GWUGFjdUO7w&amp;list=PLTDARY42LDV4qqiJd1Z1tShm3mp9-rP4v&amp;index=16&amp;ab_channel=KrishNaikHindi">Python Playlist Krish Naik-Hindi</a> </li> </ol> </li> </ul> <ol> <li> <p><a href="https://www.youtube.com/watch?v=5NgNicANyqM&amp;ab_channel=freeCodeCamp.org">Harvard CS50’s Artificial Intelligence with Python</a> </p> </li> <li> <p><a href="https://www.coursera.org/specializations/deep-learning#courses">Deep-learning Specialization</a> <a href="https://www.youtube.com/watch?v=i_LwzRVP7bg&amp;list=PLWKjhJtqVAblStefaz_YOVpDWqcRScc2s&amp;index=2">Machine/Deep Learning for Everybody – Full Course freecode camp</a></p> </li> <li> <p><a href="https://www.youtube.com/watch?v=czQO1_GEEos&amp;list=PLZoTAELRMXVPBTrWtJkn3wWQxZkmTXGwe">Machine-Learning-in-90-days</a> </p> </li> <li> <p>Zero to Mastery Machine Learning for <a href="https://github.com/mrdbourke/zero-to-mastery-ml">Quick recap</a> </p> </li> <li> <p><a href="https://www.youtube.com/watch?v=4jRBRDbJemM&amp;list=PLblh5JKOoLUICTaGLRoHQDuF_7q2GfuJF&amp;index=23&amp;ab_channel=StatQuestwithJoshStarmer">Stat Quest for concept clarification</a> Refer for concept clarification</p> </li> </ol> <hr/> <hr/>]]></content><author><name>Rutvik Joshi</name></author><category term="Machine"/><category term="Learning"/><category term="Masters"/><summary type="html"><![CDATA[Study resources for Machine Learning]]></summary></entry><entry><title type="html">Programming Tips</title><link href="https://rutvikjoshi63.github.io/blog/2023/Python_important/" rel="alternate" type="text/html" title="Programming Tips"/><published>2023-08-01T12:57:00+00:00</published><updated>2023-08-01T12:57:00+00:00</updated><id>https://rutvikjoshi63.github.io/blog/2023/Python_important</id><content type="html" xml:base="https://rutvikjoshi63.github.io/blog/2023/Python_important/"><![CDATA[<h1 id="object-oriented-programming">Object oriented programming</h1> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">To</span> <span class="n">find</span> <span class="n">number</span> <span class="n">of</span> <span class="n">functions</span> <span class="ow">and</span> <span class="n">methods</span> <span class="n">defined</span> <span class="k">for</span> <span class="n">a</span> <span class="k">class</span> 
<span class="nc">print</span><span class="p">(</span><span class="nf">dir</span><span class="p">(</span><span class="nb">object</span> <span class="n">of</span> <span class="n">class</span><span class="p">))</span>
<span class="n">eg</span><span class="p">:</span> <span class="nf">print</span><span class="p">(</span><span class="nf">dir</span><span class="p">(</span><span class="n">car1</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">welcome</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span><span class="o">-&gt;</span><span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Description: This function will show a welcome message
    

    Return : This function will return the welcome message 
    </span><span class="sh">"""</span>

    <span class="k">return</span> <span class="n">msg</span>

<span class="n">msg</span><span class="o">=</span><span class="nf">welcome</span><span class="p">(</span><span class="sh">"</span><span class="s">Welcome all</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">msg</span> <span class="o">+</span> <span class="sh">"</span><span class="s">Please subscribe</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Custom Exception
</span><span class="k">class</span> <span class="nc">Error</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="k">class</span> <span class="nc">dobException</span><span class="p">(</span><span class="n">Error</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="k">class</span> <span class="nc">customgeneric</span><span class="p">(</span><span class="n">Error</span><span class="p">):</span>
    <span class="k">pass</span>
<span class="n">year</span><span class="o">=</span><span class="nf">int</span><span class="p">(</span><span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">Enter the year of Birth </span><span class="sh">"</span><span class="p">))</span>
<span class="n">age</span><span class="o">=</span><span class="mi">2021</span><span class="o">-</span><span class="n">year</span>
<span class="k">try</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">age</span><span class="o">&lt;=</span><span class="mi">30</span> <span class="o">&amp;</span> <span class="n">age</span><span class="o">&gt;</span><span class="mi">20</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">The age is valid. You can apply for the exams</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">raise</span> <span class="n">dobException</span>
<span class="k">except</span> <span class="n">dobException</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">The age is not within the range. You cannot apply for the exams</span><span class="sh">"</span><span class="p">)</span>
    
<span class="n">Enter</span> <span class="n">the</span> <span class="n">year</span> <span class="n">of</span> <span class="n">Birth</span> <span class="mi">1986</span>
<span class="n">The</span> <span class="n">year</span> <span class="n">age</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">within</span> <span class="n">the</span> <span class="nb">range</span><span class="p">.</span> <span class="n">You</span> <span class="n">cannot</span> <span class="nb">apply</span> <span class="k">for</span> <span class="n">the</span> <span class="n">exams</span>

</code></pre></div></div> <h1 id="complex-nummbers">Complex Nummbers</h1> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">##complex numbers
</span><span class="n">j</span><span class="o">=</span><span class="mf">1.0</span><span class="o">-</span><span class="mf">2.3j</span>
<span class="n">j</span>
</code></pre></div></div> <p>Answer: \</p> <blockquote> <p>(1-2.3j) <br/> print(j.real,j.imag) <br/> 1.0 -2.3 \</p> </blockquote> <h1 id="string-formatting">string Formatting</h1> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">first_name</span><span class="o">=</span><span class="sh">"</span><span class="s">Krish</span><span class="sh">"</span>
<span class="n">last_name</span><span class="o">=</span><span class="sh">"</span><span class="s">Naik</span><span class="sh">"</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">The first name is {a} and last name is {b}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">b</span><span class="o">=</span><span class="n">last_name</span><span class="p">,</span><span class="n">a</span><span class="o">=</span><span class="n">first_name</span><span class="p">))</span>

</code></pre></div></div> <h1 id="pointers-in-python">Pointers in Python</h1> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span><span class="o">=</span><span class="sh">"</span><span class="s">Krish</span><span class="sh">"</span>
<span class="n">b</span><span class="o">=</span><span class="sh">"</span><span class="s">Krish</span><span class="sh">"</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">a</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">b</span><span class="p">))</span>
</code></pre></div></div> <p>2575134525872<br/> 2575134525872</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lst</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="n">lst1</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">lst</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">lst1</span><span class="p">))</span>

</code></pre></div></div> <p>2575100854848<br/> 2575100861184</p> <h3 id="equality-operators">Equality Operators</h3> <p><br/> Following operations are present in python for equlity check operation-<br/> \</p> <table> <thead> <tr> <th style="text-align: left">Operators</th> <th style="text-align: right">Meaning</th> </tr> </thead> <tbody> <tr> <td style="text-align: left"><strong>is</strong></td> <td style="text-align: right"><strong><em>a is b</em></strong> returns true if variable/identifiers a and b <em>points</em> to the <em>same object</em></td> </tr> <tr> <td style="text-align: left"><strong>is not</strong></td> <td style="text-align: right"><strong><em>a is not b</em></strong> returns true if variable/identifiers a and b <em>points</em> to the <em>different object</em></td> </tr> <tr> <td style="text-align: left"><strong>==</strong></td> <td style="text-align: right"><strong><em>a == b</em></strong> returns true if variable/identifiers a and b has same value</td> </tr> <tr> <td style="text-align: left"><strong>!=</strong></td> <td style="text-align: right"><strong><em>a != b</em></strong> returns true if variable/identifiers a and b has different value</td> </tr> <tr> <td style="text-align: left"><strong>/</strong></td> <td style="text-align: right">true division</td> </tr> <tr> <td style="text-align: left"><strong>//</strong></td> <td style="text-align: right">integer division</td> </tr> <tr> <td style="text-align: left"><strong>%</strong></td> <td style="text-align: right">the modulo operator</td> </tr> </tbody> </table> <h1 id="inbuilt-function-tricks">Inbuilt Function Tricks</h1> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="n">my_str</span><span class="p">.</span><span class="nf">isalnum</span><span class="p">())</span> <span class="c1">#check if all char are numbers \\
</span><span class="nf">print</span><span class="p">(</span><span class="n">my_str</span><span class="p">.</span><span class="nf">isalpha</span><span class="p">())</span> <span class="c1">#check if all char in the string are alphabetic    \\
</span><span class="nf">print</span><span class="p">(</span><span class="n">my_str</span><span class="p">.</span><span class="nf">isdigit</span><span class="p">())</span> <span class="c1">#test if string contains digits    \\
</span><span class="nf">print</span><span class="p">(</span><span class="n">my_str</span><span class="p">.</span><span class="nf">istitle</span><span class="p">())</span> <span class="c1">#test if string contains title words   \\
</span><span class="nf">print</span><span class="p">(</span><span class="n">my_str</span><span class="p">.</span><span class="nf">isupper</span><span class="p">())</span> <span class="c1">#test if string contains upper case    \\
</span><span class="nf">print</span><span class="p">(</span><span class="n">my_str</span><span class="p">.</span><span class="nf">islower</span><span class="p">())</span> <span class="c1">#test if string contains lower case    \\
</span><span class="nf">print</span><span class="p">(</span><span class="n">my_str</span><span class="p">.</span><span class="nf">isspace</span><span class="p">())</span> <span class="c1">#test if string contains spaces    \\
</span><span class="nf">print</span><span class="p">(</span><span class="n">my_str</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">'</span><span class="s">k</span><span class="sh">'</span><span class="p">))</span> <span class="c1">#test if string endswith a d   \\
</span><span class="nf">print</span><span class="p">(</span><span class="n">my_str</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">'</span><span class="s">K</span><span class="sh">'</span><span class="p">))</span> <span class="c1">#test if string startswith H \\
</span>
<span class="n">numbers</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="n">squard_numbers</span><span class="o">=</span><span class="p">[</span><span class="n">i</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">]</span>
<span class="nf">print</span><span class="p">(</span><span class="n">squard_numbers</span><span class="p">)</span>

<span class="c1">## Generating a list of all the divisors of a number:
</span>
<span class="n">number</span> <span class="o">=</span><span class="mi">36</span>
<span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">number</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="n">number</span><span class="o">%</span><span class="n">i</span><span class="o">==</span><span class="mi">0</span><span class="p">]</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">36</span><span class="p">]</span>

<span class="c1">## Generating a list of all the prime number:
</span><span class="n">number</span> <span class="o">=</span> <span class="mi">10</span>
<span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">]</span>
<span class="n">prime_num</span> <span class="o">=</span> <span class="p">[</span><span class="n">result</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">number</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="ow">not</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">result</span> <span class="k">if</span> <span class="n">i</span><span class="o">%</span><span class="n">x</span> <span class="o">==</span> <span class="mi">0</span><span class="p">]]</span>
<span class="nf">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>

<span class="c1">## Map function
</span><span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span>

<span class="n">cube_lst</span> <span class="o">=</span> <span class="p">[</span><span class="nf">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">*</span><span class="n">x</span><span class="o">*</span><span class="n">x</span><span class="p">,</span> <span class="n">l</span><span class="p">)]</span>

<span class="c1">## Filter function
</span><span class="n">new_list</span> <span class="o">=</span> <span class="p">[</span><span class="nf">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">&gt;</span><span class="mi">4</span><span class="p">,</span> <span class="n">l</span><span class="p">)]</span> <span class="c1"># lambda x: x&gt;4 return bool value
</span>
<span class="c1">## Higher order function are those that take function as argument
## Reduce function
</span><span class="kn">from</span> <span class="n">functools</span> <span class="kn">import</span> <span class="nb">reduce</span>
<span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="c1"># it will apply function to all elements and give sibngular output
</span><span class="nb">sum</span> <span class="o">=</span> <span class="nf">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">:</span> <span class="n">x</span><span class="o">+</span><span class="n">y</span><span class="p">,</span> <span class="n">l</span><span class="p">)</span>
<span class="nb">sum</span> <span class="o">=</span> <span class="mi">15</span>

<span class="c1">### try else finally
</span><span class="k">try</span><span class="p">:</span>
    <span class="c1">##code block where exception can occur
</span>    <span class="n">a</span><span class="o">=</span><span class="nf">int</span><span class="p">(</span><span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">Enter the number 1 </span><span class="sh">"</span><span class="p">))</span>
    <span class="n">b</span><span class="o">=</span><span class="nf">int</span><span class="p">(</span><span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">Enter the number 2 </span><span class="sh">"</span><span class="p">))</span>
    <span class="n">c</span><span class="o">=</span><span class="n">a</span><span class="o">/</span><span class="n">b</span>
    
<span class="k">except</span> <span class="nb">NameError</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">The user have not defined the variable</span><span class="sh">"</span><span class="p">)</span>
<span class="k">except</span> <span class="nb">ZeroDivisionError</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Please provide number greater than 0</span><span class="sh">"</span><span class="p">)</span>
<span class="k">except</span> <span class="nb">TypeError</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Try to make the datatype similar</span><span class="sh">"</span><span class="p">)</span>
<span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">ex</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">ex</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
<span class="k">finally</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">The execution is done</span><span class="sh">"</span><span class="p">)</span>

</code></pre></div></div> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
abs(x) will return the absolute value of a number x which we pass in argument. The number x can be integer, float, complex,..
ceil(x) will return the ceiling value of a number x which we pass in argument. The ceiling value of a number x will be the smallest integer not less than x
floor
exp(x) will return the exponential value of a number x which we pass in argument.
fabs()
log(x)
pow()
Triggnometric functions
modf()
Program to check prime numbers
Program to check max of 3 numbers
Pop() Method
count()

</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">math</span><span class="p">.</span><span class="nf">ceil</span><span class="p">(</span><span class="mf">43.67</span><span class="p">)</span>
<span class="mi">44</span>
<span class="n">math</span><span class="p">.</span><span class="nf">ceil</span><span class="p">(</span><span class="o">-</span><span class="mf">44.5</span><span class="p">)</span>
<span class="o">-</span><span class="mi">44</span>
<span class="n">math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="mf">43.9</span><span class="p">)</span>
<span class="mi">43</span>
<span class="n">math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="o">-</span><span class="mf">56.9</span><span class="p">)</span>
<span class="o">-</span><span class="mi">57</span>
<span class="n">math</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="mf">65.5</span><span class="p">)</span>
<span class="mf">4.182050142641207</span>
<span class="n">math</span><span class="p">.</span><span class="nf">log10</span><span class="p">(</span><span class="mi">40</span><span class="p">)</span>
<span class="mf">1.6020599913279623</span>
<span class="kn">import</span> <span class="n">math</span>
<span class="n">math</span><span class="p">.</span><span class="nf">pow</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>
<span class="mf">3200000.0</span>

<span class="n">math</span><span class="p">.</span><span class="nf">modf</span><span class="p">()</span>

<span class="n">lst</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
<span class="n">lst</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="mi">3</span>
</code></pre></div></div> <p>========================================================================================</p> <h2 id="function-tricks">Function Tricks</h2> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span><span class="k">def</span> <span class="nf">hello</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>                                    
<span class="o">&gt;</span>   <span class="nf">print</span><span class="p">(</span><span class="n">args</span><span class="p">)</span> 
<span class="o">&gt;</span>   <span class="nf">print</span><span class="p">(</span><span class="n">kwargs</span><span class="p">)</span>   
<span class="o">&gt;</span>   
<span class="o">&gt;</span><span class="nf">hello</span><span class="p">(</span><span class="sh">"</span><span class="s">Rutvik</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Joshi</span><span class="sh">"</span><span class="p">,</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">23</span><span class="p">,</span> <span class="n">dob</span> <span class="o">=</span> <span class="mi">696969</span><span class="p">)</span>   

</code></pre></div></div> <p>Answer:</p> <blockquote> <p><em>(“Rutvik”, “Joshi”)</em> <br/> <em>{‘age’ : 23, ‘dob’ : 696969}</em> \</p> </blockquote> <p>========================================================================================</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">Rutvik</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Joshi</span><span class="sh">"</span><span class="p">]</span>   
<span class="nb">dict</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">age</span><span class="sh">'</span> <span class="p">:</span> <span class="mi">23</span><span class="p">,</span> <span class="sh">'</span><span class="s">dob</span><span class="sh">'</span> <span class="p">:</span> <span class="mi">696969</span><span class="p">}</span>     
<span class="nf">hello</span><span class="p">(</span><span class="n">lst</span><span class="p">,</span> <span class="nb">dict</span><span class="p">)</span>    
</code></pre></div></div> <p><br/> Answer: <br/> <em>([“Rutvik”, “Joshi”],{‘age’ : 23, ‘dob’ : 696969} )</em> <br/> <em>{}</em> \</p> <p>========================================================================================</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span><span class="nf">hello</span><span class="p">(</span><span class="o">*</span><span class="n">lst</span><span class="p">,</span> <span class="o">**</span><span class="nb">dict</span><span class="p">)</span> 

</code></pre></div></div> <p><br/> Answer: \</p> <blockquote> <p><em>(“Rutvik”, “Joshi”)</em> <br/> <em>{‘age’ : 23, ‘dob’ : 696969}</em> \</p> </blockquote> <h1 id="map-function">Map Function</h1> <p>========================================================================================</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">even_odd</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">i</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">"</span><span class="s">{}num is even</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">"</span><span class="s">{}num is odd</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
    
<span class="n">list_num</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
<span class="nf">list</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="n">even_odd</span><span class="p">,</span> <span class="n">list_num</span><span class="p">))</span>

</code></pre></div></div> <blockquote> <p>Answer: <br/> [<em>“1 num is odd”,</em> <br/> <em>“2 num is even”,</em> <br/> <em>“3 num is odd”,</em> <br/> <em>“4 num is even”,</em> <br/> <em>“5 num is odd”,</em> <br/> <em>“6 num is even”</em>]</p> </blockquote> <p>For learning sets, Dictionary, tuples:<br/> 2-Python List,Dictionary,Sets etc</p> <p>To include a jupyter notebook in a post, you can use the following code:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{::nomarkdown}
{% assign jupyter_path = "assets/jupyter/blog.ipynb" | relative_url %}
{% capture notebook_exists %}{% file_exists assets/jupyter/blog.ipynb %}{% endcapture %}
{% if notebook_exists == "true" %}
    {% jupyter_notebook jupyter_path %}
{% else %}
    <span class="nt">&lt;p&gt;</span>Sorry, the notebook you are looking for does not exist.<span class="nt">&lt;/p&gt;</span>
{% endif %}
{:/nomarkdown}
</code></pre></div></div> <p>Let’s break it down: this is possible thanks to <a href="https://github.com/red-data-tools/jekyll-jupyter-notebook">Jekyll Jupyter Notebook plugin</a> that allows you to embed jupyter notebooks in your posts. It basically calls <a href="https://nbconvert.readthedocs.io/en/latest/usage.html#convert-html"><code class="language-plaintext highlighter-rouge">jupyter nbconvert --to html</code></a> to convert the notebook to an html page and then includes it in the post. Since <a href="https://jekyllrb.com/docs/configuration/markdown/">Kramdown</a> is the default Markdown renderer for Jekyll, we need to surround the call to the plugin with the <a href="https://kramdown.gettalong.org/syntax.html#extensions">::nomarkdown</a> tag so that it stops processing this part with Kramdown and outputs the content as-is.</p> <p>The plugin takes as input the path to the notebook, but it assumes the file exists. If you want to check if the file exists before calling the plugin, you can use the <code class="language-plaintext highlighter-rouge">file_exists</code> filter. This avoids getting a 404 error from the plugin and ending up displaying the main page inside of it instead. If the file does not exist, you can output a message to the user. The code displayed above outputs the following:</p> <div class="jupyter-notebook" style="position: relative; width: 100%; margin: 0 auto;"> <div class="jupyter-notebook-iframe-container"> <iframe src="/assets/jupyter/blog.ipynb.html" style="position: absolute; top: 0; left: 0; border-style: none;" width="100%" height="100%" onload="this.parentElement.style.paddingBottom = (this.contentWindow.document.documentElement.scrollHeight + 10) + 'px'"></iframe> </div> </div> <p>Note that the jupyter notebook supports both light and dark themes.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="jupyter"/><category term="programming"/><category term="tips"/><category term="Machine"/><category term="Learning"/><summary type="html"><![CDATA[All tricks andd tips]]></summary></entry><entry><title type="html">TOEFL</title><link href="https://rutvikjoshi63.github.io/blog/2023/Toefl-repository/" rel="alternate" type="text/html" title="TOEFL"/><published>2023-07-30T11:56:00+00:00</published><updated>2023-07-30T11:56:00+00:00</updated><id>https://rutvikjoshi63.github.io/blog/2023/Toefl-repository</id><content type="html" xml:base="https://rutvikjoshi63.github.io/blog/2023/Toefl-repository/"><![CDATA[<p><a href="https://www.ets.org/">ETS</a></p> <p><a href="https://toefl.magoosh.com/guide-toefl-ibt?utm_source=toeflblog&amp;utm_medium=blog&amp;utm_campaign=blog-pdfs&amp;utm_term=button&amp;utm_content=ibt">toefl.magoosh</a></p> <ol> <li><a href="https://toefl.magoosh.com/toefl-writing-tips-ebook/?utm_source=toeflblog&amp;utm_medium=blog&amp;utm_campaign=toeflwritingtips&amp;utm_term=inline&amp;utm_content=toefl-writing-tips">Tips to Help You Ace the Writing Section</a></li> <li><a href="https://toefl.magoosh.com/toefl-practice-questions-pdf/?utm_source=toeflblog&amp;utm_medium=blog&amp;utm_campaign=toeflpracticequestionspdf&amp;utm_term=inline&amp;utm_content=toefl-practice">Free TOEFL Practice Questions</a></li> <li><a href="https://toefl.magoosh.com/guide-toefl-ibt?utm_source=toeflblog&amp;utm_medium=blog&amp;utm_campaign=blog-pdfs&amp;utm_term=button&amp;utm_content=ibt">guide-toefl-ibt</a> <a href="https://www.ets.org/toefl.html">practise test</a></li> <li>TOEFL OFficial book and recordings</li> </ol> <p>top 100 words for toefl writing and phrases</p> <p>play store</p> <p><a href="https://www.oxfordlearnersdictionaries.com/wordlist/academic/academic/"><strong>academic vocabulary</strong></a> Reading (recheck ans in last 5 min)writing Listening and Speaking</p> <p><img src="/assets/img/Fill_table.png" alt="_config.yml"/> For Fill table in Reading Section.</p> <p>take a test first</p> <p>spellings in writing</p> <p>focus on weakness</p> <p><a href="https://www.vocabulary.com/play/"><strong>vocabulary website</strong></a></p> <p><a href="https://www.testglider.com/">testglider</a> for free test</p> <p><a href="https://www.graduateshotline.com/toefl.html"><strong>Sample and Practise test</strong></a></p> <p>watch videos on biology Listen to different accents Take notes while listening (any upside A)(watch videos on this) type faster(video)</p> <p>don’t use exact text while speaking</p> <p>Have template(structured) for speaking and essays, writing Practise</p> <p>last week only practise rest before test</p> <p>Follow these five easy steps to make your English sound more fluent starting today. 1)Smile and breathe. No matter what your level of English, confidence is vital. … 2)Memorize examples with vocabulary. Don’t just memorize lists of words. … 3)Listen to learn. … 4)Exercise your mouth muscles. … 5)Copy a native speaker</p> ]]></content><author><name></name></author><category term="sample-posts"/><category term="TOEFL"/><category term="Masters"/><summary type="html"><![CDATA[Study resources for TOEFL]]></summary></entry></feed>